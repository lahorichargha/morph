// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react-dom parses react-dom Action 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;

const Action = props => {
  return props.check ? (
    <button
      data-test-id={props['data-test-id'] || 'Vertical'}
      onClick={props.clickMe}
      disabled={props.isDisabled}
      className={Vertical_ho4tnl3}
    >
      <span data-test-id=\\"Action.Text\\">click me</span>
      {props.children}
    </button>
  ) : null;
};

export default Action;
",
  "fonts": Object {},
  "props": Object {
    "check": "string",
    "clickMe": "function",
    "isDisabled": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Action: react-dom parses react-dom Action debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;

const Action = props => {
  return props.check ? (
    <button
      data-test-id={props['data-test-id'] || 'Vertical'}
      onClick={props.clickMe}
      disabled={props.isDisabled}
      className={Vertical_ho4tnl3}
    >
      <span data-test-id=\\"Action.Text\\">click me</span>
      {props.children}
    </button>
  ) : null;
};

export default Action;
",
  "fonts": Object {},
  "props": Object {
    "check": "string",
    "clickMe": "function",
    "isDisabled": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom AnimatedButton 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled from 'react-emotion';

const Vertical = styled('button')\`
  opacity: \${({ props }) => props.opacity};
  flex-direction: column;
\`;

const AnimatedButton = props => {
  return (
    <Vertical
      data-test-id={props['data-test-id'] || 'Vertical'}
      onClick={props.onClick}
      props={props}
    >
      <span data-test-id=\\"AnimatedButton.Text\\">hey</span>
      {props.children}
    </Vertical>
  );
};

export default AnimatedButton;
",
  "fonts": Object {},
  "props": Object {
    "onClick": "function",
    "opacity": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom AnimatedButton: react-dom parses react-dom AnimatedButton debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled from 'react-emotion';

const Vertical = styled('button')\`
  opacity: \${({ props }) => props.opacity};
  flex-direction: column;
\`;

const AnimatedButton = props => {
  return (
    <Vertical
      data-test-id={props['data-test-id'] || 'Vertical'}
      onClick={props.onClick}
      props={props}
    >
      <span data-test-id=\\"AnimatedButton.Text\\">hey</span>
      {props.children}
    </Vertical>
  );
};

export default AnimatedButton;
",
  "fonts": Object {},
  "props": Object {
    "onClick": "function",
    "opacity": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom AppRegionDrag 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_hsfb8tw = css\`
  flex-direction: column;
  -webkit-app-region: drag;
  width: 92%;
\`;

const AppRegionDrag = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_hsfb8tw}
    >
      {props.children}
    </div>
  );
};

export default AppRegionDrag;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom AppRegionDrag: react-dom parses react-dom AppRegionDrag debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_hsfb8tw = css\`
  flex-direction: column;
  -webkit-app-region: drag;
  width: 92%;
\`;

const AppRegionDrag = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_hsfb8tw}
    >
      {props.children}
    </div>
  );
};

export default AppRegionDrag;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom BackgroundImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled, { css } from 'react-emotion';

const Vertical_h1fqs4qx = css\`
  flex-direction: column;
  background-image: url('https://viewsdx.com/image.jpg');
\`;
const Horizontal = styled('div')\`
  background-image: \${({ props }) => \`url(\${props.backgroundImage})\`};
  flex-direction: row;
  background-size: contain;
\`;

const BackgroundImage = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_h1fqs4qx}
    >
      <Horizontal data-test-id=\\"BackgroundImage.Horizontal\\" props={props} />
      {props.children}
    </div>
  );
};

export default BackgroundImage;
",
  "fonts": Object {},
  "props": Object {
    "backgroundImage": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom BackgroundImage: react-dom parses react-dom BackgroundImage debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled, { css } from 'react-emotion';

const Vertical_h1fqs4qx = css\`
  flex-direction: column;
  background-image: url('https://viewsdx.com/image.jpg');
\`;
const Horizontal = styled('div')\`
  background-image: \${({ props }) => \`url(\${props.backgroundImage})\`};
  flex-direction: row;
  background-size: contain;
\`;

const BackgroundImage = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_h1fqs4qx}
    >
      <Horizontal data-test-id=\\"BackgroundImage.Horizontal\\" props={props} />
      {props.children}
    </div>
  );
};

export default BackgroundImage;
",
  "fonts": Object {},
  "props": Object {
    "backgroundImage": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom BoxShadow 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled, { css } from 'react-emotion';

const Vertical = styled('div')\`
  box-shadow: \${({ props }) => \`10px 5px 2px \${props.color}\`};
  flex-direction: column;
\`;
const Vertical1 = styled('div')\`
  box-shadow: \${({ props }) => \`10px 5px 10px \${props.color}\`};
  flex-direction: column;
\`;
const Vertical_hvytwz3 = css\`
  flex-direction: column;
  box-shadow: 0px 8px 15px 0px rgba(0, 0, 0, 0.1);
\`;

const BoxShadow = props => {
  return (
    <Vertical data-test-id={props['data-test-id'] || 'Vertical'} props={props}>
      <Vertical1 data-test-id=\\"BoxShadow.Vertical:1\\" props={props}>
        <div data-test-id=\\"BoxShadow.Vertical:2\\" className={Vertical_hvytwz3} />
      </Vertical1>
      {props.children}
    </Vertical>
  );
};

export default BoxShadow;
",
  "fonts": Object {},
  "props": Object {
    "color": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom BoxShadow: react-dom parses react-dom BoxShadow debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled, { css } from 'react-emotion';

const Vertical = styled('div')\`
  box-shadow: \${({ props }) => \`10px 5px 2px \${props.color}\`};
  flex-direction: column;
\`;
const Vertical1 = styled('div')\`
  box-shadow: \${({ props }) => \`10px 5px 10px \${props.color}\`};
  flex-direction: column;
\`;
const Vertical_hvytwz3 = css\`
  flex-direction: column;
  box-shadow: 0px 8px 15px 0px rgba(0, 0, 0, 0.1);
\`;

const BoxShadow = props => {
  return (
    <Vertical data-test-id={props['data-test-id'] || 'Vertical'} props={props}>
      <Vertical1 data-test-id=\\"BoxShadow.Vertical:1\\" props={props}>
        <div data-test-id=\\"BoxShadow.Vertical:2\\" className={Vertical_hvytwz3} />
      </Vertical1>
      {props.children}
    </Vertical>
  );
};

export default BoxShadow;
",
  "fonts": Object {},
  "props": Object {
    "color": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Broken 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;

const Broken = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_ho4tnl3}
    >
      {props.children}
    </div>
  );
};

export default Broken;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Broken: react-dom parses react-dom Broken debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;

const Broken = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_ho4tnl3}
    >
      {props.children}
    </div>
  );
};

export default Broken;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ClassName 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_hsjxc34 = css\`
  flex-direction: column;
  background-color: blue;
\`;

const ClassName = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={\`hey \${Vertical_hsjxc34}\`}
    >
      {props.children}
    </div>
  );
};

export default ClassName;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ClassName: react-dom parses react-dom ClassName debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_hsjxc34 = css\`
  flex-direction: column;
  background-color: blue;
\`;

const ClassName = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={\`hey \${Vertical_hsjxc34}\`}
    >
      {props.children}
    </div>
  );
};

export default ClassName;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Code 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled, { css } from 'react-emotion';

const Vertical_h241iip = css\`
  flex-direction: column;
  background-color: red;
\`;
const Text = styled('span')\`
  color: \${({ props }) => props.color};
\`;

const Code = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      ref={$e => (this.$e = $e)}
      className={Vertical_h241iip}
    >
      <Text data-test-id=\\"Code.Text\\" innerRef={props.refText} props={props}>
        {props.text}
      </Text>
      {props.children}
    </div>
  );
};

export default Code;
",
  "fonts": Object {},
  "props": Object {
    "color": "string",
    "refText": "string",
    "text": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Code: react-dom parses react-dom Code debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled, { css } from 'react-emotion';

const Vertical_h241iip = css\`
  flex-direction: column;
  background-color: red;
\`;
const Text = styled('span')\`
  color: \${({ props }) => props.color};
\`;

const Code = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_h241iip}
    >
      <Text data-test-id=\\"Code.Text\\" props={props}>
        {props.text}
      </Text>
      {props.children}
    </div>
  );
};

export default Code;
",
  "fonts": Object {},
  "props": Object {
    "color": "string",
    "refText": "string",
    "text": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom DynamicStylesApplyToBasicBlocksOnly 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SomeThing from './SomeThing.view.js';
import styled from 'react-emotion';

const Vertical = styled('div')\`
  height: \${({ props }) => props.height}px;
  flex-direction: column;
\`;

const DynamicStylesApplyToBasicBlocksOnly = props => {
  return (
    <Vertical data-test-id={props['data-test-id'] || 'Vertical'} props={props}>
      <SomeThing
        data-test-id=\\"DynamicStylesApplyToBasicBlocksOnly.OnTop\\"
        height={props.height}
      />
      {props.children}
    </Vertical>
  );
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
  "fonts": Object {},
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom DynamicStylesApplyToBasicBlocksOnly: react-dom parses react-dom DynamicStylesApplyToBasicBlocksOnly debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SomeThing from './SomeThing.view.js';
import styled from 'react-emotion';

const Vertical = styled('div')\`
  height: \${({ props }) => props.height}px;
  flex-direction: column;
\`;

const DynamicStylesApplyToBasicBlocksOnly = props => {
  return (
    <Vertical data-test-id={props['data-test-id'] || 'Vertical'} props={props}>
      <SomeThing
        data-test-id=\\"DynamicStylesApplyToBasicBlocksOnly.OnTop\\"
        height={props.height}
      />
      {props.children}
    </Vertical>
  );
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
  "fonts": Object {},
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Form 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Form_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Button_ho4tnl3 = css\`
  flex-direction: column;
\`;

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <form
        data-test-id={props['data-test-id'] || 'Form'}
        onSubmit={() => props.onSubmit(state)}
        className={Form_ho4tnl3}
      >
        <input
          type=\\"text\\"
          onChange={event => this.setState({ name: event.target.value })}
          value={state.name}
          data-test-id=\\"Form.Name\\"
          autoFocus={true}
        />
        <input
          type=\\"text\\"
          onChange={event => this.setState({ surname: event.target.value })}
          value={state.surname}
          data-test-id=\\"Form.Surname\\"
        />
        <input
          type=\\"password\\"
          onChange={event => this.setState({ password: event.target.value })}
          value={state.password}
          data-test-id=\\"Form.Password\\"
        />
        <input
          type=\\"email\\"
          onChange={event => this.setState({ email: event.target.value })}
          value={state.email}
          data-test-id=\\"Form.Email\\"
          defaultValue=\\"morph@viewsdx.com\\"
        />
        <button
          data-test-id=\\"Form.Button\\"
          onClick={() => props.onSubmit(state)}
          className={Button_ho4tnl3}
        >
          <span data-test-id=\\"Form.Text\\">Send!</span>
        </button>
        {props.children}
      </form>
    );
  }
}

export default Form;
",
  "fonts": Object {},
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Form: react-dom parses react-dom Form debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Form_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Button_ho4tnl3 = css\`
  flex-direction: column;
\`;

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <form
        data-test-id={props['data-test-id'] || 'Form'}
        onSubmit={() => props.onSubmit(state)}
        className={Form_ho4tnl3}
      >
        <input
          type=\\"text\\"
          onChange={event => this.setState({ name: event.target.value })}
          value={state.name}
          tabIndex={-1}
          data-test-id=\\"Form.Name\\"
          className=\\"mousetrap\\"
        />
        <input
          type=\\"text\\"
          onChange={event => this.setState({ surname: event.target.value })}
          value={state.surname}
          tabIndex={-1}
          data-test-id=\\"Form.Surname\\"
        />
        <input
          type=\\"password\\"
          onChange={event => this.setState({ password: event.target.value })}
          value={state.password}
          tabIndex={-1}
          data-test-id=\\"Form.Password\\"
        />
        <input
          type=\\"email\\"
          onChange={event => this.setState({ email: event.target.value })}
          value={state.email}
          tabIndex={-1}
          data-test-id=\\"Form.Email\\"
          defaultValue=\\"morph@viewsdx.com\\"
          className=\\"mousetrap\\"
        />
        <button
          data-test-id=\\"Form.Button\\"
          onClick={() => props.onSubmit(state)}
          className={Button_ho4tnl3}
        >
          <span data-test-id=\\"Form.Text\\">Send!</span>
        </button>
        {props.children}
      </form>
    );
  }
}

export default Form;
",
  "fonts": Object {},
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom GoTo 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;

const GoTo = props => {
  return (
    <a
      href=\\"https://viewsdx.com\\"
      rel=\\"noopener noreferrer\\"
      target=\\"_blank\\"
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_ho4tnl3}
    >
      <span data-test-id=\\"GoTo.Text\\">Go to ViewsDX website!</span>
      {props.children}
    </a>
  );
};

export default GoTo;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom GoTo: react-dom parses react-dom GoTo debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;

const GoTo = props => {
  return (
    <a
      href=\\"https://viewsdx.com\\"
      rel=\\"noopener noreferrer\\"
      target=\\"_blank\\"
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_ho4tnl3}
    >
      <span data-test-id=\\"GoTo.Text\\">Go to ViewsDX website!</span>
      {props.children}
    </a>
  );
};

export default GoTo;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Hover 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled from 'react-emotion';

const Button = styled('button')\`
  background-color: \${({ props }) => props.backgroundColor};
  flex-direction: column;
  &:hover,
  &.hover {
    background-color: \${({ props }) => props.backgroundColorHover};
  }
\`;
const Text = styled('span')\`
  font-size: \${({ props }) => props.fontSize}px;
  color: white;
  \${Button}:hover &,
  \${Button}.hover & {
    font-size: \${({ props }) => props.fontSizeHover}px;
    color: black;
  }
\`;

const Hover = props => {
  return (
    <Button
      data-test-id={props['data-test-id'] || 'Button'}
      onClick={props.onClick}
      props={props}
    >
      <Text data-test-id=\\"Hover.Text\\" props={props}>
        Hey!
      </Text>
      {props.children}
    </Button>
  );
};

export default Hover;
",
  "fonts": Object {},
  "props": Object {
    "backgroundColor": "string",
    "backgroundColorHover": "string",
    "fontSize": "number",
    "fontSizeHover": "number",
    "onClick": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Hover: react-dom parses react-dom Hover debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled from 'react-emotion';

const Button = styled('button')\`
  background-color: \${({ props }) => props.backgroundColor};
  flex-direction: column;
  &:hover,
  &.hover {
    background-color: \${({ props }) => props.backgroundColorHover};
  }
\`;
const Text = styled('span')\`
  font-size: \${({ props }) => props.fontSize}px;
  color: white;
  \${Button}:hover &,
  \${Button}.hover & {
    font-size: \${({ props }) => props.fontSizeHover}px;
    color: black;
  }
\`;

const Hover = props => {
  return (
    <Button
      data-test-id={props['data-test-id'] || 'Button'}
      onClick={props.onClick}
      props={props}
    >
      <Text data-test-id=\\"Hover.Text\\" props={props}>
        Hey!
      </Text>
      {props.children}
    </Button>
  );
};

export default Hover;
",
  "fonts": Object {},
  "props": Object {
    "backgroundColor": "string",
    "backgroundColorHover": "string",
    "fontSize": "number",
    "fontSizeHover": "number",
    "onClick": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom HoverProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Button_hhxd3nw = css\`
  flex-direction: column;
  background-color: black;
  &:hover,
  &.hover {
    background-color: white;
  }
\`;
const Text_h1uuiss4 = css\`
  color: white;
  .\${Button_hhxd3nw}:hover &,
  .\${Button_hhxd3nw}.hover & {
    color: black;
  }
\`;

const HoverProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <button
      data-test-id={props['data-test-id'] || 'Button'}
      onClick={props.onClick}
      className={Button_hhxd3nw}
    >
      {props.childrenProxyMap &&
      childrenArray[props.childrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.childrenProxyMap['props.icon']],
            { fill: 'white', fillHover: 'black' }
          )
        : null}
      <Text data-test-id=\\"HoverProxy.Text\\" className={Text_h1uuiss4}>
        Hey!
      </Text>
    </button>
  );
};

export default HoverProxy;
",
  "fonts": Object {},
  "props": Object {
    "icon": "string",
    "onClick": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom HoverProxy: react-dom parses react-dom HoverProxy debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Button_hhxd3nw = css\`
  flex-direction: column;
  background-color: black;
  &:hover,
  &.hover {
    background-color: white;
  }
\`;
const Text_h1uuiss4 = css\`
  color: white;
  .\${Button_hhxd3nw}:hover &,
  .\${Button_hhxd3nw}.hover & {
    color: black;
  }
\`;

const HoverProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <button
      data-test-id={props['data-test-id'] || 'Button'}
      onClick={props.onClick}
      className={Button_hhxd3nw}
    >
      {props.childrenProxyMap &&
      childrenArray[props.childrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.childrenProxyMap['props.icon']],
            { fill: 'white', fillHover: 'black' }
          )
        : null}
      <Text data-test-id=\\"HoverProxy.Text\\" className={Text_h1uuiss4}>
        Hey!
      </Text>
    </button>
  );
};

export default HoverProxy;
",
  "fonts": Object {},
  "props": Object {
    "icon": "string",
    "onClick": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom JustText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const JustText = props => {
  return <span data-test-id={props['data-test-id'] || 'Text'}>hey!</span>;
};

export default JustText;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom JustText: react-dom parses react-dom JustText debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const JustText = props => {
  return <span data-test-id={props['data-test-id'] || 'Text'}>hey!</span>;
};

export default JustText;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ListOfButtons 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled, { css } from 'react-emotion';

const List_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Text = styled('span')\`
  color: \${({ index, item, props }) => item.color};
\`;

const ListOfButtons = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'List'}
      className={List_ho4tnl3}
    >
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <button
            data-test-id=\\"ListOfButtons.Vertical\\"
            onClick={props.onClick}
            key={index}
            className={Vertical_ho4tnl3}
          >
            <Text
              data-test-id=\\"ListOfButtons.Text\\"
              props={props}
              index={index}
              item={item}
            >
              {index}
            </Text>
          </button>
        ))}
      {props.children}
    </div>
  );
};

export default ListOfButtons;
",
  "fonts": Object {},
  "props": Object {
    "list": Object {
      "shape": Object {
        "color": "string",
      },
      "type": "array",
    },
    "onClick": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ListOfButtons: react-dom parses react-dom ListOfButtons debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled, { css } from 'react-emotion';

const List_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Text = styled('span')\`
  color: \${({ index, item, props }) => item.color};
\`;

const ListOfButtons = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'List'}
      className={List_ho4tnl3}
    >
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <button
            data-test-id=\\"ListOfButtons.Vertical\\"
            onClick={props.onClick}
            key={index}
            className={Vertical_ho4tnl3}
          >
            <Text
              data-test-id=\\"ListOfButtons.Text\\"
              props={props}
              index={index}
              item={item}
            >
              {index}
            </Text>
          </button>
        ))}
      {props.children}
    </div>
  );
};

export default ListOfButtons;
",
  "fonts": Object {},
  "props": Object {
    "list": Object {
      "shape": Object {
        "color": "string",
      },
      "type": "array",
    },
    "onClick": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ListOfSomething 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled, { css } from 'react-emotion';

const List_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Text = styled('span')\`
  color: \${({ index, item, props }) => item.color};
\`;

const ListOfSomething = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'List'}
      className={List_ho4tnl3}
    >
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <Text
            data-test-id=\\"ListOfSomething.Text\\"
            props={props}
            index={index}
            item={item}
            key={index}
          >
            {index}
          </Text>
        ))}
      {props.children}
    </div>
  );
};

export default ListOfSomething;
",
  "fonts": Object {},
  "props": Object {
    "list": Object {
      "shape": Object {
        "color": "string",
      },
      "type": "array",
    },
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ListOfSomething: react-dom parses react-dom ListOfSomething debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled, { css } from 'react-emotion';

const List_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Text = styled('span')\`
  color: \${({ index, item, props }) => item.color};
\`;

const ListOfSomething = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'List'}
      className={List_ho4tnl3}
    >
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <Text
            data-test-id=\\"ListOfSomething.Text\\"
            props={props}
            index={index}
            item={item}
            key={index}
          >
            {index}
          </Text>
        ))}
      {props.children}
    </div>
  );
};

export default ListOfSomething;
",
  "fonts": Object {},
  "props": Object {
    "list": Object {
      "shape": Object {
        "color": "string",
      },
      "type": "array",
    },
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ListOfSomethingComplex 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled, { css } from 'react-emotion';

const List_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Vertical = styled('div')\`
  background-color: \${({ index, item, props }) => item.backgroundColor};
  flex-direction: column;
  border: 1px solid red;
\`;
const Text = styled('span')\`
  color: \${({ index, item, props }) => item.color};
\`;

const ListOfSomethingComplex = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'List'}
      className={List_ho4tnl3}
    >
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <Vertical
            data-test-id=\\"ListOfSomethingComplex.Vertical\\"
            props={props}
            index={index}
            item={item}
            key={index}
          >
            <Text
              data-test-id=\\"ListOfSomethingComplex.Text\\"
              props={props}
              index={index}
              item={item}
            >
              {index}
            </Text>
          </Vertical>
        ))}
      {props.children}
    </div>
  );
};

export default ListOfSomethingComplex;
",
  "fonts": Object {},
  "props": Object {
    "list": Object {
      "shape": Object {
        "backgroundColor": "string",
        "color": "string",
      },
      "type": "array",
    },
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ListOfSomethingComplex: react-dom parses react-dom ListOfSomethingComplex debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled, { css } from 'react-emotion';

const List_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Vertical = styled('div')\`
  background-color: \${({ index, item, props }) => item.backgroundColor};
  flex-direction: column;
  border: 1px solid red;
\`;
const Text = styled('span')\`
  color: \${({ index, item, props }) => item.color};
\`;

const ListOfSomethingComplex = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'List'}
      className={List_ho4tnl3}
    >
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <Vertical
            data-test-id=\\"ListOfSomethingComplex.Vertical\\"
            props={props}
            index={index}
            item={item}
            key={index}
          >
            <Text
              data-test-id=\\"ListOfSomethingComplex.Text\\"
              props={props}
              index={index}
              item={item}
            >
              {index}
            </Text>
          </Vertical>
        ))}
      {props.children}
    </div>
  );
};

export default ListOfSomethingComplex;
",
  "fonts": Object {},
  "props": Object {
    "list": Object {
      "shape": Object {
        "backgroundColor": "string",
        "color": "string",
      },
      "type": "array",
    },
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ListWithKey 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const List_ho4tnl3 = css\`
  flex-direction: column;
\`;

const ListWithKey = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'List'}
      className={List_ho4tnl3}
    >
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <span data-test-id=\\"ListWithKey.Text\\" key={item}>
            {item}
          </span>
        ))}
      {props.children}
    </div>
  );
};

export default ListWithKey;
",
  "fonts": Object {},
  "props": Object {
    "list": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ListWithKey: react-dom parses react-dom ListWithKey debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const List_ho4tnl3 = css\`
  flex-direction: column;
\`;

const ListWithKey = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'List'}
      className={List_ho4tnl3}
    >
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <span data-test-id=\\"ListWithKey.Text\\" key={item}>
            {item}
          </span>
        ))}
      {props.children}
    </div>
  );
};

export default ListWithKey;
",
  "fonts": Object {},
  "props": Object {
    "list": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom LocalImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import chopperJpg from './chopper.jpg';

const LocalImage = props => {
  return (
    <img
      data-test-id={props['data-test-id'] || 'LocalImage'}
      src={chopperJpg}
    />
  );
};

export default LocalImage;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom LocalImage: react-dom parses react-dom LocalImage debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import chopperJpg from './chopper.jpg';

const LocalImage = props => {
  return (
    <img
      data-test-id={props['data-test-id'] || 'LocalImage'}
      src={chopperJpg}
    />
  );
};

export default LocalImage;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom LocalImageSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import chopperSvg from './chopper.svg';
import styled from 'react-emotion';

const LocalImageSvg1 = styled('img')\`
  height: \${({ props }) => props.height}px;
  width: 50px;
\`;

const LocalImageSvg = props => {
  return (
    <LocalImageSvg1
      data-test-id={props['data-test-id'] || 'LocalImageSvg'}
      src={chopperSvg}
      props={props}
    />
  );
};

export default LocalImageSvg;
",
  "fonts": Object {},
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom LocalImageSvg: react-dom parses react-dom LocalImageSvg debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import chopperSvg from './chopper.svg';
import styled from 'react-emotion';

const LocalImageSvg1 = styled('img')\`
  height: \${({ props }) => props.height}px;
  width: 50px;
\`;

const LocalImageSvg = props => {
  return (
    <LocalImageSvg1
      data-test-id={props['data-test-id'] || 'LocalImageSvg'}
      src={chopperSvg}
      props={props}
    />
  );
};

export default LocalImageSvg;
",
  "fonts": Object {},
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom LocalOrRemoteImageWhenCode 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const LocalOrRemoteImageWhenCode = props => {
  return (
    <img
      data-test-id={props['data-test-id'] || 'LocalOrRemoteImageWhenCode'}
      src={requireImage(props.source)}
    />
  );
};

export default LocalOrRemoteImageWhenCode;
",
  "fonts": Object {},
  "props": Object {
    "source": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom LocalOrRemoteImageWhenCode: react-dom parses react-dom LocalOrRemoteImageWhenCode debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const LocalOrRemoteImageWhenCode = props => {
  return (
    <img
      data-test-id={props['data-test-id'] || 'LocalOrRemoteImageWhenCode'}
      src={require(props.source)}
    />
  );
};

export default LocalOrRemoteImageWhenCode;
",
  "fonts": Object {},
  "props": Object {
    "source": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom NameIsType 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const NameIsType = props => {
  return <span data-test-id={props['data-test-id'] || 'Texto'}>iam</span>;
};

export default NameIsType;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom NameIsType: react-dom parses react-dom NameIsType debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const NameIsType = props => {
  return <span data-test-id={props['data-test-id'] || 'Texto'}>iam</span>;
};

export default NameIsType;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom NestedRoutes 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-dom';
import { Route } from 'react-router-dom';
import Topic from './Topic.view.js';
import { css } from 'react-emotion';

const Topics_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Link_ho4tnl3 = css\`
  flex-direction: column;
\`;

const NestedRoutes = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Topics'}
      className={Topics_ho4tnl3}
    >
      <span data-test-id=\\"NestedRoutes.Text\\">topics</span>
      <Link
        to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
        data-test-id=\\"NestedRoutes.Link\\"
        className={Link_ho4tnl3}
      >
        <span data-test-id=\\"NestedRoutes.Text:1\\">Rendering with React</span>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps => (
          <Topic data-test-id=\\"NestedRoutes.Topic\\" {...routeProps} />
        )}
      />
      {props.children}
    </div>
  );
};

export default withRouter(NestedRoutes);
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom NestedRoutes: react-dom parses react-dom NestedRoutes debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-dom';
import { Route } from 'react-router-dom';
import Topic from './Topic.view.js';
import { css } from 'react-emotion';

const Topics_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Link_ho4tnl3 = css\`
  flex-direction: column;
\`;

const NestedRoutes = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Topics'}
      className={Topics_ho4tnl3}
    >
      <span data-test-id=\\"NestedRoutes.Text\\">topics</span>
      <Link
        to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
        data-test-id=\\"NestedRoutes.Link\\"
        className={Link_ho4tnl3}
      >
        <span data-test-id=\\"NestedRoutes.Text:1\\">Rendering with React</span>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps => (
          <Topic data-test-id=\\"NestedRoutes.Topic\\" {...routeProps} />
        )}
      />
      {props.children}
    </div>
  );
};

export default withRouter(NestedRoutes);
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Print 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;

const Print = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_ho4tnl3}
    >
      <span data-test-id=\\"Print.Text\\" className={Text_h1d06m5g}>
        not in print
      </span>
      <span data-test-id=\\"Print.Text:1\\">hey</span>
      {props.children}
    </div>
  );
};

export default Print;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Print: react-dom parses react-dom Print debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;

const Print = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_ho4tnl3}
    >
      <span data-test-id=\\"Print.Text\\" className={Text_h1d06m5g}>
        not in print
      </span>
      <span data-test-id=\\"Print.Text:1\\">hey</span>
      {props.children}
    </div>
  );
};

export default Print;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ProxyTest 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Horizontal_h1qq1i2q = css\`
  flex-direction: row;
\`;

const ProxyTest = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_ho4tnl3}
    >
      <div data-test-id=\\"ProxyTest.Horizontal\\" className={Horizontal_h1qq1i2q}>
        {props.bla && childrenArray[props.childrenProxyMap['Something']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['Something']],
              { onClick: props.onClickRemapped }
            )
          : null}
      </div>
      {props.childrenProxyMap && childrenArray[props.childrenProxyMap['View1']]}
    </div>
  );
};

export default ProxyTest;
",
  "fonts": Object {},
  "props": Object {
    "bla": "string",
    "onClickRemapped": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ProxyTest: react-dom parses react-dom ProxyTest debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Horizontal_h1qq1i2q = css\`
  flex-direction: row;
\`;

const ProxyTest = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_ho4tnl3}
    >
      <div data-test-id=\\"ProxyTest.Horizontal\\" className={Horizontal_h1qq1i2q}>
        {props.bla && childrenArray[props.childrenProxyMap['Something']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['Something']],
              { onClick: props.onClickRemapped }
            )
          : null}
      </div>
      {props.childrenProxyMap && childrenArray[props.childrenProxyMap['View1']]}
    </div>
  );
};

export default ProxyTest;
",
  "fonts": Object {},
  "props": Object {
    "bla": "string",
    "onClickRemapped": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Scope 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled from 'react-emotion';

const Text = styled('span')\`
  color: \${({ props }) =>
    props.somethingGreen
      ? 'rgb(0,255,0)'
      : props.whatMakesBlue ? 'rgb(0,0,255)' : 'red'};
\`;

const Scope = props => {
  return (
    <Text data-test-id={props['data-test-id'] || 'Text'} props={props}>
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue ? props.blue : '1 red'}
    </Text>
  );
};

export default Scope;
",
  "fonts": Object {},
  "props": Object {
    "blue": "string",
    "somethingGreen": "string",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Scope: react-dom parses react-dom Scope debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled from 'react-emotion';

const Text = styled('span')\`
  color: \${({ props }) =>
    props.somethingGreen
      ? 'rgb(0,255,0)'
      : props.whatMakesBlue ? 'rgb(0,0,255)' : 'red'};
\`;

const Scope = props => {
  return (
    <Text data-test-id={props['data-test-id'] || 'Text'} props={props}>
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue ? props.blue : '1 red'}
    </Text>
  );
};

export default Scope;
",
  "fonts": Object {},
  "props": Object {
    "blue": "string",
    "somethingGreen": "string",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ScopeOnCustomView 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';

const ScopeOnCustomView = props => {
  return (
    <Button
      data-test-id={props['data-test-id'] || 'Button'}
      label={props.a ? 'ho' : props.b ? 'this is b' : 'hey'}
      another={props.a ? 1 : 0}
      more={props.a ? props.different : props.more}
    >
      {props.children}
    </Button>
  );
};

export default ScopeOnCustomView;
",
  "fonts": Object {},
  "props": Object {
    "different": "string",
    "more": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ScopeOnCustomView: react-dom parses react-dom ScopeOnCustomView debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';

const ScopeOnCustomView = props => {
  return (
    <Button
      data-test-id={props['data-test-id'] || 'Button'}
      label={props.a ? 'ho' : props.b ? 'this is b' : 'hey'}
      another={props.a ? 1 : 0}
      more={props.a ? props.different : props.more}
    >
      {props.children}
    </Button>
  );
};

export default ScopeOnCustomView;
",
  "fonts": Object {},
  "props": Object {
    "different": "string",
    "more": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Popup_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Toggle_ho4tnl3 = css\`
  flex-direction: column;
\`;

const ScopePopup = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Popup'}
      animate=\\"pop\\"
      className={Popup_ho4tnl3}
    >
      <button
        data-test-id=\\"ScopePopup.Toggle\\"
        onClick={
          props.somethingGreen
            ? props.onClickGreen
            : props.whatMakesBlue ? props.onClickBlue : props.toggle
        }
        className={Toggle_ho4tnl3}
      >
        <span data-test-id=\\"ScopePopup.Text\\">toggle popup</span>
      </button>
      {props.children}
    </div>
  );
};

export default ScopePopup;
",
  "fonts": Object {},
  "props": Object {
    "isShown": "string",
    "onClickBlue": "function",
    "onClickGreen": "function",
    "somethingGreen": "string",
    "toggle": "function",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup: react-dom parses react-dom ScopePopup debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Popup_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Toggle_ho4tnl3 = css\`
  flex-direction: column;
\`;

const ScopePopup = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Popup'}
      animate=\\"pop\\"
      className={Popup_ho4tnl3}
    >
      <button
        data-test-id=\\"ScopePopup.Toggle\\"
        onClick={
          props.somethingGreen
            ? props.onClickGreen
            : props.whatMakesBlue ? props.onClickBlue : props.toggle
        }
        className={Toggle_ho4tnl3}
      >
        <span data-test-id=\\"ScopePopup.Text\\">toggle popup</span>
      </button>
      {props.children}
    </div>
  );
};

export default ScopePopup;
",
  "fonts": Object {},
  "props": Object {
    "isShown": "string",
    "onClickBlue": "function",
    "onClickGreen": "function",
    "somethingGreen": "string",
    "toggle": "function",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup2 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Popup_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Toggle_ho4tnl3 = css\`
  flex-direction: column;
\`;

const ScopePopup2 = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Popup'}
      className={Popup_ho4tnl3}
    >
      <button
        data-test-id=\\"ScopePopup2.Toggle\\"
        onClick={props.toggle}
        className={Toggle_ho4tnl3}
      >
        <span data-test-id=\\"ScopePopup2.Text\\">toggle popup</span>
      </button>
      {props.children}
    </div>
  );
};

export default ScopePopup2;
",
  "fonts": Object {},
  "props": Object {
    "isShown": "string",
    "isSuperVisible": "string",
    "toggle": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup2: react-dom parses react-dom ScopePopup2 debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Popup_ho4tnl3 = css\`
  flex-direction: column;
\`;
const Toggle_ho4tnl3 = css\`
  flex-direction: column;
\`;

const ScopePopup2 = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Popup'}
      className={Popup_ho4tnl3}
    >
      <button
        data-test-id=\\"ScopePopup2.Toggle\\"
        onClick={props.toggle}
        className={Toggle_ho4tnl3}
      >
        <span data-test-id=\\"ScopePopup2.Text\\">toggle popup</span>
      </button>
      {props.children}
    </div>
  );
};

export default ScopePopup2;
",
  "fonts": Object {},
  "props": Object {
    "isShown": "string",
    "isSuperVisible": "string",
    "toggle": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Teleport 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Link } from 'react-router-dom';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css\`
  flex-direction: row;
\`;

const Teleport = props => {
  return (
    <Link
      to=\\"..\\"
      data-test-id={props['data-test-id'] || 'Horizontal'}
      className={Horizontal_h1qq1i2q}
    >
      <span data-test-id=\\"Teleport.Text\\">go back</span>
      {props.children}
    </Link>
  );
};

export default Teleport;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Teleport: react-dom parses react-dom Teleport debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Link } from 'react-router-dom';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css\`
  flex-direction: row;
\`;

const Teleport = props => {
  return (
    <Link
      to=\\"..\\"
      data-test-id={props['data-test-id'] || 'Horizontal'}
      className={Horizontal_h1qq1i2q}
    >
      <span data-test-id=\\"Teleport.Text\\">go back</span>
      {props.children}
    </Link>
  );
};

export default Teleport;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Test 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Custom from './Custom.view.js';

const Test = props => {
  return (
    <Custom
      data-test-id={props['data-test-id'] || 'Custom'}
      stuff=\\"eqweqw\\"
      childrenProxyMap={{ Something: 0, Another: 1 }}
    >
      <span data-test-id=\\"Test.Something\\">v1vh1t1</span>
      <span data-test-id=\\"Test.Another\\">inside custom</span>
      {props.children}
    </Custom>
  );
};

export default Test;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Test: react-dom parses react-dom Test debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Custom from './Custom.view.js';

const Test = props => {
  return (
    <Custom
      data-test-id={props['data-test-id'] || 'Custom'}
      stuff=\\"eqweqw\\"
      childrenProxyMap={{ Something: 0, Another: 1 }}
    >
      <span data-test-id=\\"Test.Something\\">v1vh1t1</span>
      <span data-test-id=\\"Test.Another\\">inside custom</span>
      {props.children}
    </Custom>
  );
};

export default Test;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom TestIds 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import External from './External.view.js';
import { css } from 'react-emotion';

const App_ho4tnl3 = css\`
  flex-direction: column;
\`;

const TestIds = props => {
  return (
    <div data-test-id={props['data-test-id'] || 'App'} className={App_ho4tnl3}>
      <span data-test-id=\\"TestIds.Text\\">1</span>
      <span data-test-id=\\"TestIds.Text:1\\">2</span>
      <External data-test-id=\\"TestIds.External\\" />
      <span data-test-id=\\"TestIds.Name\\">name</span>
      {props.children}
    </div>
  );
};

export default TestIds;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom TestIds: react-dom parses react-dom TestIds debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import External from './External.view.js';
import { css } from 'react-emotion';

const App_ho4tnl3 = css\`
  flex-direction: column;
\`;

const TestIds = props => {
  return (
    <div data-test-id={props['data-test-id'] || 'App'} className={App_ho4tnl3}>
      <span data-test-id=\\"TestIds.Text\\">1</span>
      <span data-test-id=\\"TestIds.Text:1\\">2</span>
      <External data-test-id=\\"TestIds.External\\" />
      <span data-test-id=\\"TestIds.Name\\">name</span>
      {props.children}
    </div>
  );
};

export default TestIds;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom TextInterpolation 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;

const TextInterpolation = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_ho4tnl3}
    >
      <span data-test-id=\\"TextInterpolation.Text\\">{\`\${props.name} test\`}</span>
      <span data-test-id=\\"TextInterpolation.Text:1\\">
        {props.name ? \`\${props.name} here\` : 'other'}
      </span>
      {props.children}
    </div>
  );
};

export default TextInterpolation;
",
  "fonts": Object {},
  "props": Object {
    "name": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom TextInterpolation: react-dom parses react-dom TextInterpolation debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;

const TextInterpolation = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_ho4tnl3}
    >
      <span data-test-id=\\"TextInterpolation.Text\\">{\`\${props.name} test\`}</span>
      <span data-test-id=\\"TextInterpolation.Text:1\\">
        {props.name ? \`\${props.name} here\` : 'other'}
      </span>
      {props.children}
    </div>
  );
};

export default TextInterpolation;
",
  "fonts": Object {},
  "props": Object {
    "name": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Toggle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const Toggle = props => {
  return <span data-test-id={props['data-test-id'] || 'Text'}>NOPE</span>;
};

export default Toggle;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom Toggle: react-dom parses react-dom Toggle debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const Toggle = props => {
  return <span data-test-id={props['data-test-id'] || 'Text'}>NOPE</span>;
};

export default Toggle;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureEmail 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Email_h1by7qdg = css\`border: 1px solid black;
color: red;
&:focus, &.focus {
color: purple;
}
color: blue;
}\`;

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"email\\"
        onChange={event => this.setState({ email: event.target.value })}
        value={state.email}
        data-test-id={props['data-test-id'] || 'Email'}
        autoFocus={true}
        defaultValue=\\"hey this is a default value\\"
        onSubmit={props.onSubmit}
        className={Email_h1by7qdg}
      />
    );
  }
}

export default UseCaptureEmail;
",
  "fonts": Object {},
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureEmail: react-dom parses react-dom UseCaptureEmail debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Email_h1by7qdg = css\`border: 1px solid black;
color: red;
&:focus, &.focus {
color: purple;
}
color: blue;
}\`;

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"email\\"
        onChange={event => this.setState({ email: event.target.value })}
        value={state.email}
        tabIndex={-1}
        data-test-id={props['data-test-id'] || 'Email'}
        defaultValue=\\"hey this is a default value\\"
        onSubmit={props.onSubmit}
        className={\`mousetrap \${Email_h1by7qdg}\`}
      />
    );
  }
}

export default UseCaptureEmail;
",
  "fonts": Object {},
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureFile 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        onChange={event => this.setState({ file: event.target.value })}
        value={state.file}
        data-test-id={props['data-test-id'] || 'File'}
      />
    );
  }
}

export default UseCaptureFile;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureFile: react-dom parses react-dom UseCaptureFile debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        onChange={event => this.setState({ file: event.target.value })}
        value={state.file}
        tabIndex={-1}
        data-test-id={props['data-test-id'] || 'File'}
      />
    );
  }
}

export default UseCaptureFile;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureNumber 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"number\\"
        onChange={event => this.setState({ number: event.target.value })}
        value={state.number}
        data-test-id={props['data-test-id'] || 'Number'}
      />
    );
  }
}

export default UseCaptureNumber;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureNumber: react-dom parses react-dom UseCaptureNumber debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"number\\"
        onChange={event => this.setState({ number: event.target.value })}
        value={state.number}
        tabIndex={-1}
        data-test-id={props['data-test-id'] || 'Number'}
      />
    );
  }
}

export default UseCaptureNumber;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCapturePhone 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"tel\\"
        onChange={event => this.setState({ phone: event.target.value })}
        value={state.phone}
        data-test-id={props['data-test-id'] || 'Phone'}
      />
    );
  }
}

export default UseCapturePhone;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCapturePhone: react-dom parses react-dom UseCapturePhone debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"tel\\"
        onChange={event => this.setState({ phone: event.target.value })}
        value={state.phone}
        tabIndex={-1}
        data-test-id={props['data-test-id'] || 'Phone'}
      />
    );
  }
}

export default UseCapturePhone;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureSecure 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"password\\"
        onChange={event => this.setState({ secure: event.target.value })}
        value={state.secure}
        data-test-id={props['data-test-id'] || 'Secure'}
      />
    );
  }
}

export default UseCaptureSecure;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureSecure: react-dom parses react-dom UseCaptureSecure debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"password\\"
        onChange={event => this.setState({ secure: event.target.value })}
        value={state.secure}
        tabIndex={-1}
        data-test-id={props['data-test-id'] || 'Secure'}
      />
    );
  }
}

export default UseCaptureSecure;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"text\\"
        onChange={event => this.setState({ text: event.target.value })}
        value={state.text}
        data-test-id={props['data-test-id'] || 'Text'}
      />
    );
  }
}

export default UseCaptureText;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureText: react-dom parses react-dom UseCaptureText debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"text\\"
        onChange={event => this.setState({ text: event.target.value })}
        value={state.text}
        tabIndex={-1}
        data-test-id={props['data-test-id'] || 'Text'}
      />
    );
  }
}

export default UseCaptureText;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextArea 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureTextArea extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <textarea
        onChange={event =>
          this.setState({ captureTextArea: event.target.value })
        }
        value={state.captureTextArea}
        data-test-id={props['data-test-id'] || 'CaptureTextArea'}
      />
    );
  }
}

export default UseCaptureTextArea;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextArea: react-dom parses react-dom UseCaptureTextArea debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureTextArea extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <textarea
        onChange={event =>
          this.setState({ captureTextArea: event.target.value })
        }
        value={state.captureTextArea}
        tabIndex={-1}
        data-test-id={props['data-test-id'] || 'CaptureTextArea'}
      />
    );
  }
}

export default UseCaptureTextArea;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextManagedFromOutside 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureTextManagedFromOutside extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"text\\"
        data-test-id={props['data-test-id'] || 'CaptureText'}
        value={props.external}
      />
    );
  }
}

export default UseCaptureTextManagedFromOutside;
",
  "fonts": Object {},
  "props": Object {
    "external": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextManagedFromOutside: react-dom parses react-dom UseCaptureTextManagedFromOutside debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

class UseCaptureTextManagedFromOutside extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <input
        type=\\"text\\"
        data-test-id={props['data-test-id'] || 'CaptureText'}
        value={props.external}
        className=\\"mousetrap\\"
      />
    );
  }
}

export default UseCaptureTextManagedFromOutside;
",
  "fonts": Object {},
  "props": Object {
    "external": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseHorizontal 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Horizontal_hud64j7 = css\`
  flex-direction: row;
  border: 1px solid red;
\`;

const UseHorizontal = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Horizontal'}
      className={Horizontal_hud64j7}
    >
      {props.children}
    </div>
  );
};

export default UseHorizontal;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseHorizontal: react-dom parses react-dom UseHorizontal debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Horizontal_hud64j7 = css\`
  flex-direction: row;
  border: 1px solid red;
\`;

const UseHorizontal = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Horizontal'}
      className={Horizontal_hud64j7}
    >
      {props.children}
    </div>
  );
};

export default UseHorizontal;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const UseImage = props => {
  return (
    <img
      data-test-id={props['data-test-id'] || 'Image'}
      src=\\"https://views.tools/rocks.jpg\\"
    />
  );
};

export default UseImage;
",
  "fonts": Object {},
  "props": Object {
    "another": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseImage: react-dom parses react-dom UseImage debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const UseImage = props => {
  return (
    <img
      data-test-id={props['data-test-id'] || 'Image'}
      src=\\"https://views.tools/rocks.jpg\\"
    />
  );
};

export default UseImage;
",
  "fonts": Object {},
  "props": Object {
    "another": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseOfProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import { css } from 'react-emotion';

const App_h1qq1i2q = css\`
  flex-direction: row;
\`;

const UseOfProxy = props => {
  return (
    <div data-test-id={props['data-test-id'] || 'App'} className={App_h1qq1i2q}>
      <Button
        data-test-id=\\"UseOfProxy.Button\\"
        color=\\"red\\"
        icon=\\"MyIcon\\"
        text=\\"I'm a button!\\"
      />
      {props.children}
    </div>
  );
};

export default UseOfProxy;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseOfProxy: react-dom parses react-dom UseOfProxy debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import { css } from 'react-emotion';

const App_h1qq1i2q = css\`
  flex-direction: row;
\`;

const UseOfProxy = props => {
  return (
    <div data-test-id={props['data-test-id'] || 'App'} className={App_h1qq1i2q}>
      <Button
        data-test-id=\\"UseOfProxy.Button\\"
        color=\\"red\\"
        icon=\\"MyIcon\\"
        text=\\"I'm a button!\\"
      />
      {props.children}
    </div>
  );
};

export default UseOfProxy;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Button_h1qq1i2q = css\`
  flex-direction: row;
\`;

const UseProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div
      data-test-id={props['data-test-id'] || 'Button'}
      className={Button_h1qq1i2q}
    >
      {props.childrenProxyMap &&
      childrenArray[props.childrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.childrenProxyMap['props.icon']],
            { fill: 'red' }
          )
        : null}
      <span data-test-id=\\"UseProxy.Text\\">{props.text}</span>
    </div>
  );
};

export default UseProxy;
",
  "fonts": Object {},
  "props": Object {
    "icon": "string",
    "text": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseProxy: react-dom parses react-dom UseProxy debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Button_h1qq1i2q = css\`
  flex-direction: row;
\`;

const UseProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div
      data-test-id={props['data-test-id'] || 'Button'}
      className={Button_h1qq1i2q}
    >
      {props.childrenProxyMap &&
      childrenArray[props.childrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.childrenProxyMap['props.icon']],
            { fill: 'red' }
          )
        : null}
      <span data-test-id=\\"UseProxy.Text\\">{props.text}</span>
    </div>
  );
};

export default UseProxy;
",
  "fonts": Object {},
  "props": Object {
    "icon": "string",
    "text": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseRouter 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-dom';
import { BrowserRouter as Router } from 'react-router-dom';
import Topics from './Topics.view.js';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css\`
  flex-direction: row;
\`;

const UseRouter = props => {
  return (
    <Router>
      <div
        data-test-id={props['data-test-id'] || 'Horizontal'}
        className={Horizontal_h1qq1i2q}
      >
        <Route
          path=\\"/\\"
          exact
          render={routeProps => (
            <Home
              data-test-id=\\"UseRouter.Home\\"
              height={props.height}
              width={360}
              {...routeProps}
            />
          )}
        />
        <Route
          path=\\"/about\\"
          render={routeProps => (
            <About data-test-id=\\"UseRouter.About\\" {...routeProps} />
          )}
        />
        <Route
          path=\\"/topics\\"
          render={routeProps => (
            <Topics data-test-id=\\"UseRouter.Topics\\" {...routeProps} />
          )}
        />
        {props.children}
      </div>
    </Router>
  );
};

export default UseRouter;
",
  "fonts": Object {},
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseRouter: react-dom parses react-dom UseRouter debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-dom';
import { BrowserRouter as Router } from 'react-router-dom';
import Topics from './Topics.view.js';
import { css } from 'react-emotion';

const Horizontal_h1qq1i2q = css\`
  flex-direction: row;
\`;

const UseRouter = props => {
  return (
    <Router>
      <div
        data-test-id={props['data-test-id'] || 'Horizontal'}
        className={Horizontal_h1qq1i2q}
      >
        <Route
          path=\\"/\\"
          exact
          render={routeProps => (
            <Home
              data-test-id=\\"UseRouter.Home\\"
              height={props.height}
              width={360}
              {...routeProps}
            />
          )}
        />
        <Route
          path=\\"/about\\"
          render={routeProps => (
            <About data-test-id=\\"UseRouter.About\\" {...routeProps} />
          )}
        />
        <Route
          path=\\"/topics\\"
          render={routeProps => (
            <Topics data-test-id=\\"UseRouter.Topics\\" {...routeProps} />
          )}
        />
        {props.children}
      </div>
    </Router>
  );
};

export default UseRouter;
",
  "fonts": Object {},
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Svg_hq411mi = css\`
  height: 20px;
  width: 20px;
\`;

const UseSvg = props => {
  return (
    <svg
      data-test-id={props['data-test-id'] || 'Svg'}
      viewBox=\\"0 0 20 20\\"
      className={Svg_hq411mi}
    >
      <path data-test-id=\\"UseSvg.SvgPath\\" d=\\"0 20\\" />
      <circle data-test-id=\\"UseSvg.SvgCircle\\" cx={10} cy={5} r={5} />
      <g data-test-id=\\"UseSvg.SvgGroup\\">
        <path data-test-id=\\"UseSvg.SvgPath:1\\" d={1} />
        <path data-test-id=\\"UseSvg.SvgPath:2\\" d={2} />
      </g>
      <text data-test-id=\\"UseSvg.SvgText\\" text=\\"hey\\" />
      {props.children}
    </svg>
  );
};

export default UseSvg;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseSvg: react-dom parses react-dom UseSvg debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Svg_hq411mi = css\`
  height: 20px;
  width: 20px;
\`;

const UseSvg = props => {
  return (
    <svg
      data-test-id={props['data-test-id'] || 'Svg'}
      viewBox=\\"0 0 20 20\\"
      className={Svg_hq411mi}
    >
      <path data-test-id=\\"UseSvg.SvgPath\\" d=\\"0 20\\" />
      <circle data-test-id=\\"UseSvg.SvgCircle\\" cx={10} cy={5} r={5} />
      <g data-test-id=\\"UseSvg.SvgGroup\\">
        <path data-test-id=\\"UseSvg.SvgPath:1\\" d={1} />
        <path data-test-id=\\"UseSvg.SvgPath:2\\" d={2} />
      </g>
      <text data-test-id=\\"UseSvg.SvgText\\" text=\\"hey\\" />
      {props.children}
    </svg>
  );
};

export default UseSvg;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Text_hjam8jb = css\`
  color: blue;
  font-family: Montserrat, sans-serif;
  font-size: 16px;
  line-height: 1.5;
  font-weight: 300;
\`;

const UseText = props => {
  return (
    <span
      data-test-id={props['data-test-id'] || 'Text'}
      className={Text_hjam8jb}
    >
      Hi, I'm some text
    </span>
  );
};

export default UseText;
",
  "fonts": Object {
    "Montserrat": Array [
      "300",
    ],
  },
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseText: react-dom parses react-dom UseText debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Text_hjam8jb = css\`
  color: blue;
  font-family: Montserrat, sans-serif;
  font-size: 16px;
  line-height: 1.5;
  font-weight: 300;
\`;

const UseText = props => {
  return (
    <span
      data-test-id={props['data-test-id'] || 'Text'}
      className={Text_hjam8jb}
    >
      Hi, I'm some text
    </span>
  );
};

export default UseText;
",
  "fonts": Object {
    "Montserrat": Array [
      "300",
    ],
  },
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseVertical 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_h241iip = css\`
  flex-direction: column;
  background-color: red;
\`;

const UseVertical = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_h241iip}
    >
      {props.children}
    </div>
  );
};

export default UseVertical;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom UseVertical: react-dom parses react-dom UseVertical debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_h241iip = css\`
  flex-direction: column;
  background-color: red;
\`;

const UseVertical = props => {
  return (
    <div
      data-test-id={props['data-test-id'] || 'Vertical'}
      className={Vertical_h241iip}
    >
      {props.children}
    </div>
  );
};

export default UseVertical;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ViewNameIsntUsedInStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled from 'react-emotion';

const ViewNameIsntUsedInStyle1 = styled('div')\`
  opacity: \${({ props }) => props.opacity};
  flex-direction: column;
  z-index: 5;
\`;

const ViewNameIsntUsedInStyle = props => {
  return (
    <ViewNameIsntUsedInStyle1
      data-test-id={props['data-test-id'] || 'ViewNameIsntUsedInStyle'}
      props={props}
    >
      {props.children}
    </ViewNameIsntUsedInStyle1>
  );
};

export default ViewNameIsntUsedInStyle;
",
  "fonts": Object {},
  "props": Object {
    "opacity": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom ViewNameIsntUsedInStyle: react-dom parses react-dom ViewNameIsntUsedInStyle debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import styled from 'react-emotion';

const ViewNameIsntUsedInStyle1 = styled('div')\`
  opacity: \${({ props }) => props.opacity};
  flex-direction: column;
  z-index: 5;
\`;

const ViewNameIsntUsedInStyle = props => {
  return (
    <ViewNameIsntUsedInStyle1
      data-test-id={props['data-test-id'] || 'ViewNameIsntUsedInStyle'}
      props={props}
    >
      {props.children}
    </ViewNameIsntUsedInStyle1>
  );
};

export default ViewNameIsntUsedInStyle;
",
  "fonts": Object {},
  "props": Object {
    "opacity": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom When 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const App_h1qq1i2q = css\`
  flex-direction: row;
\`;

const When = props => {
  return (
    <div data-test-id={props['data-test-id'] || 'App'} className={App_h1qq1i2q}>
      {props.showMe ? (
        <span data-test-id=\\"When.Text\\">I may be hidden</span>
      ) : null}
      {props.children}
    </div>
  );
};

export default When;
",
  "fonts": Object {},
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom When: react-dom parses react-dom When debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const App_h1qq1i2q = css\`
  flex-direction: row;
\`;

const When = props => {
  return (
    <div data-test-id={props['data-test-id'] || 'App'} className={App_h1qq1i2q}>
      {props.showMe ? (
        <span data-test-id=\\"When.Text\\">I may be hidden</span>
      ) : null}
      {props.children}
    </div>
  );
};

export default When;
",
  "fonts": Object {},
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom WhenList 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const App_h1qq1i2q = css\`
  flex-direction: row;
\`;
const List_ho4tnl3 = css\`
  flex-direction: column;
\`;

const WhenList = props => {
  return (
    <div data-test-id={props['data-test-id'] || 'App'} className={App_h1qq1i2q}>
      {props.showMe ? (
        <div data-test-id=\\"WhenList.List\\" className={List_ho4tnl3}>
          {Array.isArray(props.list) &&
            props.list.map((item, index) => (
              <span data-test-id=\\"WhenList.Text\\" key={index}>
                {item.thing}
              </span>
            ))}
        </div>
      ) : null}
      {props.children}
    </div>
  );
};

export default WhenList;
",
  "fonts": Object {},
  "props": Object {
    "list": Object {
      "shape": Object {
        "thing": "string",
      },
      "type": "array",
    },
    "showMe": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom WhenList: react-dom parses react-dom WhenList debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const App_h1qq1i2q = css\`
  flex-direction: row;
\`;
const List_ho4tnl3 = css\`
  flex-direction: column;
\`;

const WhenList = props => {
  return (
    <div data-test-id={props['data-test-id'] || 'App'} className={App_h1qq1i2q}>
      {props.showMe ? (
        <div data-test-id=\\"WhenList.List\\" className={List_ho4tnl3}>
          {Array.isArray(props.list) &&
            props.list.map((item, index) => (
              <span data-test-id=\\"WhenList.Text\\" key={index}>
                {item.thing}
              </span>
            ))}
        </div>
      ) : null}
      {props.children}
    </div>
  );
};

export default WhenList;
",
  "fonts": Object {},
  "props": Object {
    "list": Object {
      "shape": Object {
        "thing": "string",
      },
      "type": "array",
    },
    "showMe": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom WhenTopLevel 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const WhenTopLevel = props => {
  return props.showMe ? (
    <span data-test-id={props['data-test-id'] || 'Text'}>I may be hidden</span>
  ) : null;
};

export default WhenTopLevel;
",
  "fonts": Object {},
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom WhenTopLevel: react-dom parses react-dom WhenTopLevel debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';

const WhenTopLevel = props => {
  return props.showMe ? (
    <span data-test-id={props['data-test-id'] || 'Text'}>I may be hidden</span>
  ) : null;
};

export default WhenTopLevel;
",
  "fonts": Object {},
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom WithTest 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;

const WithTest = props => {
  return (
    <button
      data-test-id={props['data-test-id'] || 'Vertical'}
      onClick={props.change}
      className={Vertical_ho4tnl3}
    >
      <span data-test-id=\\"WithTest.Text\\">{props.text}</span>
      {props.children}
    </button>
  );
};

export default WithTest;
",
  "fonts": Object {},
  "props": Object {
    "change": "function",
    "text": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {
        "change": "Next",
        "text": "in Main",
      },
      "name": "Main",
    },
    Object {
      "data": Object {
        "change": "Main",
        "text": "in Next",
      },
      "name": "Next",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-dom parses react-dom WithTest: react-dom parses react-dom WithTest debug 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { css } from 'react-emotion';

const Vertical_ho4tnl3 = css\`
  flex-direction: column;
\`;

const WithTest = props => {
  return (
    <button
      data-test-id={props['data-test-id'] || 'Vertical'}
      onClick={props.change}
      className={Vertical_ho4tnl3}
    >
      <span data-test-id=\\"WithTest.Text\\">{props.text}</span>
      {props.children}
    </button>
  );
};

export default WithTest;
",
  "fonts": Object {},
  "props": Object {
    "change": "function",
    "text": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {
        "change": "Next",
        "text": "in Main",
      },
      "name": "Main",
    },
    Object {
      "data": Object {
        "change": "Main",
        "text": "in Next",
      },
      "name": "Next",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native Action 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const Action = props => {
  return props.check ? (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.clickMe}
      disabled={props.isDisabled}
      underlayColor=\\"transparent\\"
    >
      <View testID={props['testID'] || 'Vertical'} style={styles.h18pdll5}>
        <Text testID=\\"Action.Text\\">click me</Text>
        {props.children}
      </View>
    </TouchableWithoutFeedback>
  ) : null;
};

export default Action;
",
  "fonts": Object {},
  "props": Object {
    "check": "string",
    "clickMe": "function",
    "isDisabled": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native AnimatedButton 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import {
  Animated,
  StyleSheet,
  Text,
  TouchableWithoutFeedback,
} from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const AnimatedButton = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.onClick}
      underlayColor=\\"transparent\\"
    >
      <Animated.View
        testID={props['testID'] || 'Vertical'}
        style={[styles.h18pdll5, { opacity: props.opacity }]}
      >
        <Text testID=\\"AnimatedButton.Text\\">hey</Text>
        {props.children}
      </Animated.View>
    </TouchableWithoutFeedback>
  );
};

export default AnimatedButton;
",
  "fonts": Object {},
  "props": Object {
    "onClick": "function",
    "opacity": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native AppRegionDrag 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h1yjtav2: { flexDirection: 'column', width: '92%' },
});

const AppRegionDrag = props => {
  return (
    <View testID={props['testID'] || 'Vertical'} style={styles.h1yjtav2}>
      {props.children}
    </View>
  );
};

export default AppRegionDrag;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native BackgroundImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, Image, StyleSheet } from 'react-native';
const styles = StyleSheet.create({
  h18pdll5: { flexDirection: 'column' },
  hp2cr4d: { flexDirection: 'row' },
});

const BackgroundImage = props => {
  return (
    <Image
      resizeMode=\\"cover\\"
      source={{ uri: 'https://viewsdx.com/image.jpg' }}
      testID={props['testID'] || 'Vertical'}
      style={styles.h18pdll5}
    >
      <Animated.Image
        resizeMode=\\"contain\\"
        source={{ uri: props.backgroundImage }}
        testID=\\"BackgroundImage.Horizontal\\"
        style={styles.hp2cr4d}
      />
      {props.children}
    </Image>
  );
};

export default BackgroundImage;
",
  "fonts": Object {},
  "props": Object {
    "backgroundImage": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native BoxShadow 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h18pdll5: { flexDirection: 'column' },
  h141a9qm: {
    flexDirection: 'column',
    elevation: 1,
    shadowOffset: { width: 0, height: 8 },
    shadowRadius: 15,
    shadowOpacity: 1,
    shadowColor: 'rgba(0, 0, 0, 0.1)',
  },
});

const BoxShadow = props => {
  return (
    <Animated.View
      testID={props['testID'] || 'Vertical'}
      style={[
        styles.h18pdll5,
        {
          elevation: 1,
          shadowOffset: { width: 10, height: 5 },
          shadowRadius: 2,
          shadowOpacity: 1,
          shadowColor: props.color,
        },
      ]}
    >
      <Animated.View
        testID=\\"BoxShadow.Vertical:1\\"
        style={[
          styles.h18pdll5,
          {
            elevation: 1,
            shadowOffset: { width: 10, height: 5 },
            shadowRadius: 10,
            shadowOpacity: 1,
            shadowColor: props.color,
          },
        ]}
      >
        <View testID=\\"BoxShadow.Vertical:2\\" style={styles.h141a9qm} />
      </Animated.View>
      {props.children}
    </Animated.View>
  );
};

export default BoxShadow;
",
  "fonts": Object {},
  "props": Object {
    "color": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native Broken 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const Broken = props => {
  return (
    <View testID={props['testID'] || 'Vertical'} style={styles.h18pdll5}>
      {props.children}
    </View>
  );
};

export default Broken;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native ClassName 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h1cpfewk: { flexDirection: 'column', backgroundColor: 'blue' },
});

const ClassName = props => {
  return (
    <View testID={props['testID'] || 'Vertical'} style={styles.h1cpfewk}>
      {props.children}
    </View>
  );
};

export default ClassName;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native Code 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h1c5r919: { flexDirection: 'column', backgroundColor: 'red' },
});

const Code = props => {
  return (
    <View
      testID={props['testID'] || 'Vertical'}
      ref={$e => (this.$e = $e)}
      style={styles.h1c5r919}
    >
      <Animated.Text
        testID=\\"Code.Text\\"
        ref={props.refText}
        style={{ color: props.color }}
      >
        {props.text}
      </Animated.Text>
      {props.children}
    </View>
  );
};

export default Code;
",
  "fonts": Object {},
  "props": Object {
    "color": "string",
    "refText": "string",
    "text": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native DynamicStylesApplyToBasicBlocksOnly 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import SomeThing from './SomeThing.view.js';
import { Animated, StyleSheet } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const DynamicStylesApplyToBasicBlocksOnly = props => {
  return (
    <Animated.View
      testID={props['testID'] || 'Vertical'}
      style={[styles.h18pdll5, { height: props.height }]}
    >
      <SomeThing
        testID=\\"DynamicStylesApplyToBasicBlocksOnly.OnTop\\"
        height={props.height}
      />
      {props.children}
    </Animated.View>
  );
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
  "fonts": Object {},
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native Form 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import {
  StyleSheet,
  Text,
  TextInput,
  TouchableWithoutFeedback,
  View,
} from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <View testID={props['testID'] || 'Form'} style={styles.h18pdll5}>
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Surname ? () => this.$Surname.focus() : null}
          returnKeyType={this.$Surname ? 'next' : 'go'}
          onChangeText={name => this.setState({ name })}
          ref={$e => (this.$name = $e)}
          value={state.name}
          keyboardType=\\"default\\"
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID=\\"Form.Name\\"
          autoFocus={true}
        />
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Password ? () => this.$Password.focus() : null}
          returnKeyType={this.$Password ? 'next' : 'go'}
          onChangeText={surname => this.setState({ surname })}
          ref={$e => (this.$surname = $e)}
          value={state.surname}
          keyboardType=\\"default\\"
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID=\\"Form.Surname\\"
        />
        <TextInput
          blurOnSubmit={false}
          onSubmitEditing={this.$Email ? () => this.$Email.focus() : null}
          returnKeyType={this.$Email ? 'next' : 'go'}
          onChangeText={password => this.setState({ password })}
          ref={$e => (this.$password = $e)}
          value={state.password}
          secureTextEntry
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          testID=\\"Form.Password\\"
        />
        <TextInput
          returnKeyType=\\"done\\"
          onChangeText={email => this.setState({ email })}
          ref={$e => (this.$email = $e)}
          value={state.email}
          keyboardType=\\"email-address\\"
          autoCorrect={false}
          defaultValue=\\"morph@viewsdx.com\\"
          underlineColorAndroid=\\"transparent\\"
          testID=\\"Form.Email\\"
          defaultValue=\\"morph@viewsdx.com\\"
        />
        <TouchableWithoutFeedback
          activeOpacity={0.7}
          onPress={() => props.onSubmit(state)}
          underlayColor=\\"transparent\\"
        >
          <View testID=\\"Form.Button\\" style={styles.h18pdll5}>
            <Text testID=\\"Form.Text\\">Send!</Text>
          </View>
        </TouchableWithoutFeedback>
        {props.children}
      </View>
    );
  }
}

export default Form;
",
  "fonts": Object {},
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native GoTo 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const GoTo = props => {
  return (
    <View testID={props['testID'] || 'Vertical'} style={styles.h18pdll5}>
      <Text testID=\\"GoTo.Text\\">Go to ViewsDX website!</Text>
      {props.children}
    </View>
  );
};

export default GoTo;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native Hover 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, TouchableWithoutFeedback } from 'react-native';
const styles = StyleSheet.create({
  h18pdll5: { flexDirection: 'column' },
  hyfo4ef: { color: 'white' },
});

const Hover = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.onClick}
      underlayColor=\\"transparent\\"
    >
      <Animated.View
        testID={props['testID'] || 'Button'}
        style={[styles.h18pdll5, { backgroundColor: props.backgroundColor }]}
      >
        <Animated.Text
          testID=\\"Hover.Text\\"
          style={[styles.hyfo4ef, { fontSize: props.fontSize }]}
        >
          Hey!
        </Animated.Text>
        {props.children}
      </Animated.View>
    </TouchableWithoutFeedback>
  );
};

export default Hover;
",
  "fonts": Object {},
  "props": Object {
    "backgroundColor": "string",
    "backgroundColorHover": "string",
    "fontSize": "number",
    "fontSizeHover": "number",
    "onClick": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native HoverProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({
  h1jrzrhl: { flexDirection: 'column', backgroundColor: 'black' },
  hyfo4ef: { color: 'white' },
});

const HoverProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.onClick}
      underlayColor=\\"transparent\\"
    >
      <View testID={props['testID'] || 'Button'} style={styles.h1jrzrhl}>
        {props.childrenProxyMap &&
        childrenArray[props.childrenProxyMap['props.icon']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['props.icon']],
              { fill: 'white', fillHover: 'black' }
            )
          : null}
        <Text testID=\\"HoverProxy.Text\\" style={styles.hyfo4ef}>
          Hey!
        </Text>
      </View>
    </TouchableWithoutFeedback>
  );
};

export default HoverProxy;
",
  "fonts": Object {},
  "props": Object {
    "icon": "string",
    "onClick": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native JustText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const JustText = props => {
  return <Text testID={props['testID'] || 'Text'}>hey!</Text>;
};

export default JustText;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native ListOfButtons 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import {
  Animated,
  StyleSheet,
  TouchableWithoutFeedback,
  View,
} from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ListOfButtons = props => {
  return (
    <View testID={props['testID'] || 'List'} style={styles.h18pdll5}>
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <TouchableWithoutFeedback
            activeOpacity={0.7}
            onPress={props.onClick}
            underlayColor=\\"transparent\\"
            key={index}
          >
            <View testID=\\"ListOfButtons.Vertical\\" style={styles.h18pdll5}>
              <Animated.Text
                testID=\\"ListOfButtons.Text\\"
                style={{ color: item.color }}
              >
                {index}
              </Animated.Text>
            </View>
          </TouchableWithoutFeedback>
        ))}
      {props.children}
    </View>
  );
};

export default ListOfButtons;
",
  "fonts": Object {},
  "props": Object {
    "list": Object {
      "shape": Object {
        "color": "string",
      },
      "type": "array",
    },
    "onClick": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native ListOfSomething 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ListOfSomething = props => {
  return (
    <View testID={props['testID'] || 'List'} style={styles.h18pdll5}>
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <Animated.Text
            testID=\\"ListOfSomething.Text\\"
            style={{ color: item.color }}
            key={index}
          >
            {index}
          </Animated.Text>
        ))}
      {props.children}
    </View>
  );
};

export default ListOfSomething;
",
  "fonts": Object {},
  "props": Object {
    "list": Object {
      "shape": Object {
        "color": "string",
      },
      "type": "array",
    },
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native ListOfSomethingComplex 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h18pdll5: { flexDirection: 'column' },
  h1562g93: {
    flexDirection: 'column',
    borderColor: 'red',
    borderStyle: 'solid',
    borderWidth: 1,
  },
});

const ListOfSomethingComplex = props => {
  return (
    <View testID={props['testID'] || 'List'} style={styles.h18pdll5}>
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <Animated.View
            testID=\\"ListOfSomethingComplex.Vertical\\"
            style={[styles.h1562g93, { backgroundColor: item.backgroundColor }]}
            key={index}
          >
            <Animated.Text
              testID=\\"ListOfSomethingComplex.Text\\"
              style={{ color: item.color }}
            >
              {index}
            </Animated.Text>
          </Animated.View>
        ))}
      {props.children}
    </View>
  );
};

export default ListOfSomethingComplex;
",
  "fonts": Object {},
  "props": Object {
    "list": Object {
      "shape": Object {
        "backgroundColor": "string",
        "color": "string",
      },
      "type": "array",
    },
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native ListWithKey 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ListWithKey = props => {
  return (
    <View testID={props['testID'] || 'List'} style={styles.h18pdll5}>
      {Array.isArray(props.list) &&
        props.list.map((item, index) => (
          <Text testID=\\"ListWithKey.Text\\" key={item}>
            {item}
          </Text>
        ))}
      {props.children}
    </View>
  );
};

export default ListWithKey;
",
  "fonts": Object {},
  "props": Object {
    "list": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native LocalImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import chopperJpg from './chopper.jpg';
import { Image } from 'react-native';

const LocalImage = props => {
  return <Image testID={props['testID'] || 'LocalImage'} source={chopperJpg} />;
};

export default LocalImage;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native LocalImageSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import ChopperSvgInline from './ChopperSvgInline.view.js';

const LocalImageSvg = props => {
  return (
    <ChopperSvgInline
      testID={props['testID'] || 'LocalImageSvg'}
      width={50}
      height={props.height}
    />
  );
};

export default LocalImageSvg;
",
  "fonts": Object {},
  "props": Object {
    "height": "number",
  },
  "svgs": Array [
    Object {
      "source": "./chopper.svg",
      "view": "ChopperSvgInline",
    },
  ],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native LocalOrRemoteImageWhenCode 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Image } from 'react-native';

const LocalOrRemoteImageWhenCode = props => {
  return (
    <Image
      testID={props['testID'] || 'LocalOrRemoteImageWhenCode'}
      source={
        /^https?:\\\\/\\\\//.test(props.source)
          ? { uri: props.source }
          : requireImage(props.source)
      }
    />
  );
};

export default LocalOrRemoteImageWhenCode;
",
  "fonts": Object {},
  "props": Object {
    "source": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native NameIsType 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const NameIsType = props => {
  return <Text testID={props['testID'] || 'Texto'}>iam</Text>;
};

export default NameIsType;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native NestedRoutes 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-native';
import { Route } from 'react-router-native';
import Topic from './Topic.view.js';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const NestedRoutes = props => {
  return (
    <View testID={props['testID'] || 'Topics'} style={styles.h18pdll5}>
      <Text testID=\\"NestedRoutes.Text\\">topics</Text>
      <Link
        activeOpacity={0.7}
        to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
        underlayColor=\\"transparent\\"
      >
        <View testID=\\"NestedRoutes.Link\\" style={styles.h18pdll5}>
          <Text testID=\\"NestedRoutes.Text:1\\">Rendering with React</Text>
        </View>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps => (
          <Topic testID=\\"NestedRoutes.Topic\\" {...routeProps} />
        )}
      />
      {props.children}
    </View>
  );
};

export default withRouter(NestedRoutes);
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native Print 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const Print = props => {
  return (
    <View testID={props['testID'] || 'Vertical'} style={styles.h18pdll5}>
      <Text testID=\\"Print.Text\\">not in print</Text>
      <Text testID=\\"Print.Text:1\\">hey</Text>
      {props.children}
    </View>
  );
};

export default Print;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native ProxyTest 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h18pdll5: { flexDirection: 'column' },
  hp2cr4d: { flexDirection: 'row' },
});

const ProxyTest = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <View testID={props['testID'] || 'Vertical'} style={styles.h18pdll5}>
      <View testID=\\"ProxyTest.Horizontal\\" style={styles.hp2cr4d}>
        {props.bla && childrenArray[props.childrenProxyMap['Something']]
          ? React.cloneElement(
              childrenArray[props.childrenProxyMap['Something']],
              { onClick: props.onClickRemapped }
            )
          : null}
      </View>
      {props.childrenProxyMap && childrenArray[props.childrenProxyMap['View1']]}
    </View>
  );
};

export default ProxyTest;
",
  "fonts": Object {},
  "props": Object {
    "bla": "string",
    "onClickRemapped": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native Scope 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const Scope = props => {
  return (
    <Text
      testID={props['testID'] || 'Text'}
      style={{
        color: props.somethingGreen
          ? 'rgb(0,255,0)'
          : props.whatMakesBlue ? 'rgb(0,0,255)' : 'red',
      }}
    >
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue ? props.blue : '1 red'}
    </Text>
  );
};

export default Scope;
",
  "fonts": Object {},
  "props": Object {
    "blue": "string",
    "somethingGreen": "string",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native ScopeOnCustomView 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';

const ScopeOnCustomView = props => {
  return (
    <Button
      testID={props['testID'] || 'Button'}
      label={props.a ? 'ho' : props.b ? 'this is b' : 'hey'}
      another={props.a ? 1 : 0}
      more={props.a ? props.different : props.more}
    >
      {props.children}
    </Button>
  );
};

export default ScopeOnCustomView;
",
  "fonts": Object {},
  "props": Object {
    "different": "string",
    "more": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native ScopePopup 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ScopePopup = props => {
  return (
    <View
      testID={props['testID'] || 'Popup'}
      animate=\\"pop\\"
      style={styles.h18pdll5}
    >
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={
          props.somethingGreen
            ? props.onClickGreen
            : props.whatMakesBlue ? props.onClickBlue : props.toggle
        }
        underlayColor=\\"transparent\\"
      >
        <View testID=\\"ScopePopup.Toggle\\" style={styles.h18pdll5}>
          <Text testID=\\"ScopePopup.Text\\">toggle popup</Text>
        </View>
      </TouchableWithoutFeedback>
      {props.children}
    </View>
  );
};

export default ScopePopup;
",
  "fonts": Object {},
  "props": Object {
    "isShown": "string",
    "onClickBlue": "function",
    "onClickGreen": "function",
    "somethingGreen": "string",
    "toggle": "function",
    "whatMakesBlue": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native ScopePopup2 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ScopePopup2 = props => {
  return (
    <View testID={props['testID'] || 'Popup'} style={styles.h18pdll5}>
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={props.toggle}
        underlayColor=\\"transparent\\"
      >
        <View testID=\\"ScopePopup2.Toggle\\" style={styles.h18pdll5}>
          <Text testID=\\"ScopePopup2.Text\\">toggle popup</Text>
        </View>
      </TouchableWithoutFeedback>
      {props.children}
    </View>
  );
};

export default ScopePopup2;
",
  "fonts": Object {},
  "props": Object {
    "isShown": "string",
    "isSuperVisible": "string",
    "toggle": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native Teleport 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Link } from 'react-router-native';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const Teleport = props => {
  return (
    <Link activeOpacity={0.7} to=\\"..\\" underlayColor=\\"transparent\\">
      <View testID={props['testID'] || 'Horizontal'} style={styles.hp2cr4d}>
        <Text testID=\\"Teleport.Text\\">go back</Text>
        {props.children}
      </View>
    </Link>
  );
};

export default Teleport;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native Test 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Custom from './Custom.view.js';
import { Text } from 'react-native';

const Test = props => {
  return (
    <Custom
      testID={props['testID'] || 'Custom'}
      stuff=\\"eqweqw\\"
      childrenProxyMap={{ Something: 0, Another: 1 }}
    >
      <Text testID=\\"Test.Something\\">v1vh1t1</Text>
      <Text testID=\\"Test.Another\\">inside custom</Text>
      {props.children}
    </Custom>
  );
};

export default Test;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native TestIds 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import External from './External.view.js';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const TestIds = props => {
  return (
    <View testID={props['testID'] || 'App'} style={styles.h18pdll5}>
      <Text testID=\\"TestIds.Text\\">1</Text>
      <Text testID=\\"TestIds.Text:1\\">2</Text>
      <External testID=\\"TestIds.External\\" />
      <Text testID=\\"TestIds.Name\\">name</Text>
      {props.children}
    </View>
  );
};

export default TestIds;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native TextInterpolation 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const TextInterpolation = props => {
  return (
    <View testID={props['testID'] || 'Vertical'} style={styles.h18pdll5}>
      <Text testID=\\"TextInterpolation.Text\\">{\`\${props.name} test\`}</Text>
      <Text testID=\\"TextInterpolation.Text:1\\">
        {props.name ? \`\${props.name} here\` : 'other'}
      </Text>
      {props.children}
    </View>
  );
};

export default TextInterpolation;
",
  "fonts": Object {},
  "props": Object {
    "name": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native Toggle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const Toggle = props => {
  return <Text testID={props['testID'] || 'Text'}>NOPE</Text>;
};

export default Toggle;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseCaptureEmail 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, TextInput } from 'react-native';
const styles = StyleSheet.create({
  hm4pcs: {
    borderColor: 'black',
    borderStyle: 'solid',
    borderWidth: 1,
    color: 'red',
  },
});

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        onSubmitEditing={props.onSubmit}
        returnKeyType=\\"go\\"
        onChangeText={email => this.setState({ email })}
        ref={$e => (this.$email = $e)}
        value={state.email}
        keyboardType=\\"email-address\\"
        autoCorrect={false}
        defaultValue=\\"hey this is a default value\\"
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'Email'}
        autoFocus={true}
        placeholderTextColor=\\"blue\\"
        defaultValue=\\"hey this is a default value\\"
        style={styles.hm4pcs}
      />
    );
  }
}

export default UseCaptureEmail;
",
  "fonts": Object {},
  "props": Object {
    "onSubmit": "function",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseCaptureFile 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import CaptureFile from './CaptureFile.view.js';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <CaptureFile
        returnKeyType=\\"done\\"
        onChangeText={file => this.setState({ file })}
        ref={$e => (this.$file = $e)}
        value={state.file}
        keyboardType=\\"undefined\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'File'}
      />
    );
  }
}

export default UseCaptureFile;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseCaptureNumber 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={number => this.setState({ number })}
        ref={$e => (this.$number = $e)}
        value={state.number}
        keyboardType=\\"numeric\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'Number'}
      />
    );
  }
}

export default UseCaptureNumber;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseCapturePhone 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={phone => this.setState({ phone })}
        ref={$e => (this.$phone = $e)}
        value={state.phone}
        keyboardType=\\"phone-pad\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'Phone'}
      />
    );
  }
}

export default UseCapturePhone;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseCaptureSecure 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={secure => this.setState({ secure })}
        ref={$e => (this.$secure = $e)}
        value={state.secure}
        secureTextEntry
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'Secure'}
      />
    );
  }
}

export default UseCaptureSecure;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseCaptureText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={text => this.setState({ text })}
        ref={$e => (this.$text = $e)}
        value={state.text}
        keyboardType=\\"default\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'Text'}
      />
    );
  }
}

export default UseCaptureText;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseCaptureTextArea 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureTextArea extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={captureTextArea => this.setState({ captureTextArea })}
        ref={$e => (this.$captureTextArea = $e)}
        value={state.captureTextArea}
        keyboardType=\\"undefined\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'CaptureTextArea'}
      />
    );
  }
}

export default UseCaptureTextArea;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseCaptureTextManagedFromOutside 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { TextInput } from 'react-native';

class UseCaptureTextManagedFromOutside extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <TextInput
        returnKeyType=\\"done\\"
        onChangeText={captureText => this.setState({ captureText })}
        ref={$e => (this.$captureText = $e)}
        value={state.captureText}
        keyboardType=\\"default\\"
        autoCorrect={false}
        underlineColorAndroid=\\"transparent\\"
        testID={props['testID'] || 'CaptureText'}
        value={props.external}
      />
    );
  }
}

export default UseCaptureTextManagedFromOutside;
",
  "fonts": Object {},
  "props": Object {
    "external": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseHorizontal 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h13qdyyc: {
    flexDirection: 'row',
    borderColor: 'red',
    borderStyle: 'solid',
    borderWidth: 1,
  },
});

const UseHorizontal = props => {
  return (
    <View testID={props['testID'] || 'Horizontal'} style={styles.h13qdyyc}>
      {props.children}
    </View>
  );
};

export default UseHorizontal;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Image } from 'react-native';

const UseImage = props => {
  return (
    <Image
      testID={props['testID'] || 'Image'}
      source={{ uri: 'https://views.tools/rocks.jpg' }}
    />
  );
};

export default UseImage;
",
  "fonts": Object {},
  "props": Object {
    "another": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseOfProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Button from './Button.view.js';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const UseOfProxy = props => {
  return (
    <View testID={props['testID'] || 'App'} style={styles.hp2cr4d}>
      <Button
        testID=\\"UseOfProxy.Button\\"
        color=\\"red\\"
        icon=\\"MyIcon\\"
        text=\\"I'm a button!\\"
      />
      {props.children}
    </View>
  );
};

export default UseOfProxy;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const UseProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <View testID={props['testID'] || 'Button'} style={styles.hp2cr4d}>
      {props.childrenProxyMap &&
      childrenArray[props.childrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.childrenProxyMap['props.icon']],
            { fill: 'red' }
          )
        : null}
      <Text testID=\\"UseProxy.Text\\">{props.text}</Text>
    </View>
  );
};

export default UseProxy;
",
  "fonts": Object {},
  "props": Object {
    "icon": "string",
    "text": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseRouter 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-native';
import { NativeRouter as Router } from 'react-router-native';
import Topics from './Topics.view.js';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const UseRouter = props => {
  return (
    <Router>
      <View testID={props['testID'] || 'Horizontal'} style={styles.hp2cr4d}>
        <Route
          path=\\"/\\"
          exact
          render={routeProps => (
            <Home
              testID=\\"UseRouter.Home\\"
              height={props.height}
              width={360}
              {...routeProps}
            />
          )}
        />
        <Route
          path=\\"/about\\"
          render={routeProps => (
            <About testID=\\"UseRouter.About\\" {...routeProps} />
          )}
        />
        <Route
          path=\\"/topics\\"
          render={routeProps => (
            <Topics testID=\\"UseRouter.Topics\\" {...routeProps} />
          )}
        />
        {props.children}
      </View>
    </Router>
  );
};

export default UseRouter;
",
  "fonts": Object {},
  "props": Object {
    "height": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import Svg, {
  Circle as SvgCircle,
  G as SvgGroup,
  Path as SvgPath,
  Text as SvgText,
} from 'react-native-svg';
import { StyleSheet } from 'react-native';
const styles = StyleSheet.create({ h8aawx1: { height: 20, width: 20 } });

const UseSvg = props => {
  return (
    <Svg
      testID={props['testID'] || 'Svg'}
      viewBox=\\"0 0 20 20\\"
      style={styles.h8aawx1}
    >
      <SvgPath testID=\\"UseSvg.SvgPath\\" d=\\"0 20\\" />
      <SvgCircle testID=\\"UseSvg.SvgCircle\\" cx={10} cy={5} r={5} />
      <SvgGroup testID=\\"UseSvg.SvgGroup\\">
        <SvgPath testID=\\"UseSvg.SvgPath:1\\" d={1} />
        <SvgPath testID=\\"UseSvg.SvgPath:2\\" d={2} />
      </SvgGroup>
      <SvgText testID=\\"UseSvg.SvgText\\" text=\\"hey\\" />
      {props.children}
    </Svg>
  );
};

export default UseSvg;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text } from 'react-native';
const styles = StyleSheet.create({
  h1gml2rz: {
    color: 'blue',
    fontFamily: 'Montserrat-300',
    fontSize: 16,
    lineHeight: 24,
  },
});

const UseText = props => {
  return (
    <Text testID={props['testID'] || 'Text'} style={styles.h1gml2rz}>
      Hi, I'm some text
    </Text>
  );
};

export default UseText;
",
  "fonts": Object {
    "Montserrat": Array [
      "300",
    ],
  },
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native UseVertical 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h1c5r919: { flexDirection: 'column', backgroundColor: 'red' },
});

const UseVertical = props => {
  return (
    <View testID={props['testID'] || 'Vertical'} style={styles.h1c5r919}>
      {props.children}
    </View>
  );
};

export default UseVertical;
",
  "fonts": Object {},
  "props": Object {},
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native ViewNameIsntUsedInStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Animated, StyleSheet } from 'react-native';
const styles = StyleSheet.create({
  h1jyh4qf: { flexDirection: 'column', zIndex: 5 },
});

const ViewNameIsntUsedInStyle = props => {
  return (
    <Animated.View
      testID={props['testID'] || 'ViewNameIsntUsedInStyle'}
      style={[styles.h1jyh4qf, { opacity: props.opacity }]}
    >
      {props.children}
    </Animated.View>
  );
};

export default ViewNameIsntUsedInStyle;
",
  "fonts": Object {},
  "props": Object {
    "opacity": "number",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native When 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const When = props => {
  return (
    <View testID={props['testID'] || 'App'} style={styles.hp2cr4d}>
      {props.showMe ? <Text testID=\\"When.Text\\">I may be hidden</Text> : null}
      {props.children}
    </View>
  );
};

export default When;
",
  "fonts": Object {},
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native WhenList 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({
  hp2cr4d: { flexDirection: 'row' },
  h18pdll5: { flexDirection: 'column' },
});

const WhenList = props => {
  return (
    <View testID={props['testID'] || 'App'} style={styles.hp2cr4d}>
      {props.showMe ? (
        <View testID=\\"WhenList.List\\" style={styles.h18pdll5}>
          {Array.isArray(props.list) &&
            props.list.map((item, index) => (
              <Text testID=\\"WhenList.Text\\" key={index}>
                {item.thing}
              </Text>
            ))}
        </View>
      ) : null}
      {props.children}
    </View>
  );
};

export default WhenList;
",
  "fonts": Object {},
  "props": Object {
    "list": Object {
      "shape": Object {
        "thing": "string",
      },
      "type": "array",
    },
    "showMe": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native WhenTopLevel 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { Text } from 'react-native';

const WhenTopLevel = props => {
  return props.showMe ? (
    <Text testID={props['testID'] || 'Text'}>I may be hidden</Text>
  ) : null;
};

export default WhenTopLevel;
",
  "fonts": Object {},
  "props": Object {
    "showMe": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {},
      "name": "Main",
    },
  ],
  "todos": Array [],
}
`;

exports[`react-native parses react-native WithTest 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const WithTest = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.change}
      underlayColor=\\"transparent\\"
    >
      <View testID={props['testID'] || 'Vertical'} style={styles.h18pdll5}>
        <Text testID=\\"WithTest.Text\\">{props.text}</Text>
        {props.children}
      </View>
    </TouchableWithoutFeedback>
  );
};

export default WithTest;
",
  "fonts": Object {},
  "props": Object {
    "change": "function",
    "text": "string",
  },
  "svgs": Array [],
  "tests": Array [
    Object {
      "data": Object {
        "change": "Next",
        "text": "in Main",
      },
      "name": "Main",
    },
    Object {
      "data": Object {
        "change": "Main",
        "text": "in Next",
      },
      "name": "Next",
    },
  ],
  "todos": Array [],
}
`;
